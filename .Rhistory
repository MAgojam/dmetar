scale_y_continuous(limits = c(min, max)) +
geom_rect(aes(ymin=plot.sum.lower, ymax=plot.sum.upper, xmin=0, xmax=Inf), alpha=0.08, fill="lightgreen", color=NA) +
geom_hline(yintercept = plot.sum.effect, color = "darkgreen", linetype="dotted", size=0.5) +
geom_point(shape = 15, size = 4.5, color = "grey") +
geom_linerange(size = 0.9) +
geom_pointrange(shape = 3, size = 0.3)
ggplot(sortdat.i2, aes(x = studlab, y = mean, ymin = lower, ymax = upper)) +
geom_text(aes(label = title.i2, y = Inf), parse = T, hjust = "inward", size = 3 * text.scale) +
geom_hline(yintercept = 0, color = "blue") + ylab(paste(ggtitl, " (", as.character(lastline$studlab), ")", sep = "")) +
ggtitle(expression(Sorted~by~italic(I)^2)) +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.title.x = element_text(color = "black", size = 12, face = "bold"), axis.text.y = element_text(color = "black", size = 9 * text.scale), plot.title = element_text(face = "bold", hjust = 0.5), axis.line.x = element_line(color = "black"), axis.ticks.x = element_line(color = "black"), axis.text.x = element_text(color = "black", size = 9 * text.scale)) +
scale_y_continuous(limits = c(min, max)) +
geom_rect(aes(ymin=plot.sum.lower, ymax=plot.sum.upper, xmin=0, xmax=Inf), alpha=0.08, fill="lightgreen", color=NA) +
geom_hline(yintercept = plot.sum.effect, color = "darkgreen", linetype="dotted", size=0.5) +
geom_point(shape = 15, size = 4.5, color = "grey") +
geom_linerange(size = 0.9) +
geom_pointrange(shape = 3, size = 0.3)
ggplot(sortdat.es, aes(x = studlab, y = mean, ymin = lower, ymax = upper)) + geom_pointrange() +
geom_text(aes(label = paste(format(round(mean, 2), nsmall = 2), " [", format(round(lower, 2),
nsmall = 2), ";", format(round(upper, 2), nsmall = 2), "] ", "; I2=", format(round(i2, 2),
nsmall = 2), sep = ""), y = Inf), hjust = "inward", size = 2 * text.scale) + geom_hline(yintercept = 1,
color = "blue") + ylab(paste(effect, " (", as.character(lastline$studlab), ")", sep = "")) + ggtitle("Sorted by Effect Size") +
coord_flip() + theme_minimal() + theme(axis.title.y = element_blank(), axis.title.x = element_text(color = "black",
size = 12, face = "bold"), axis.text.y = element_text(color = "black", size = 9 * text.scale),
plot.title = element_text(face = "bold", hjust = 0.5), axis.line.x = element_line(color = "black"),
axis.ticks.x = element_line(color = "black"), axis.text.x = element_text(color = "black", size = 9 *
text.scale)) + scale_y_continuous(trans = "log2", limits = c(min, max)) +
geom_rect(aes(ymin=plot.sum.lower, ymax=plot.sum.upper, xmin=0, xmax=Inf), alpha=0.08, fill="lightgreen", color=NA) + geom_hline(yintercept = plot.sum.effect, color = "darkgreen", linetype="dotted", size=0.5) + geom_pointrange()
library(dmetar)
?InfluenceAnalysis
data(ThirdWave)
# Create 'meta' meta-analysis object
suppressPackageStartupMessages(library(meta))
meta = metagen(TE, seTE, studlab = paste(ThirdWave$Author), data=ThirdWave)
# Run influence analysis; specify to return separate plots when plotted
inf.an = InfluenceAnalysis(meta, return.separate.plots = TRUE)
plot(inf.an)
plot(inf.an, "ES")
plot(inf.an, "I2")
?InfluenceAnalysis
data(ThirdWave)
# Create 'meta' meta-analysis object
suppressPackageStartupMessages(library(meta))
meta = metagen(TE, seTE, studlab = paste(ThirdWave$Author), data=ThirdWave)
# Run influence analysis; specify to return separate plots when plotted
inf.an = InfluenceAnalysis(meta, return.separate.plots = TRUE, random = T)
plot(inf.an, "ES")
?metabin
mbin <- metabin(event.e, n.e, event.c, n.c,
data = Olkin95, subset = year < 1970,
sm = "OR", method = "Inverse", studlab = author)
data("Olkin95")
mbin <- metabin(event.e, n.e, event.c, n.c,
data = Olkin95, subset = year < 1970,
sm = "OR", method = "Inverse", studlab = author)
data("Olkin95")
mbin <- metabin(event.e, n.e, event.c, n.c,
data = Olkin95, subset = year < 1970,
sm = "OR", method = "Inverse", studlab = author)
ia1 <- InfluenceAnalysis(mbin)
plot(ia1, "ES")
plot(ia2, "I2")
plot(ia1, "I2")
?metaprop
m1 <- metaprop(4:1, 10 * 1:4, method = "Inverse")
ia2 <- InfluenceAnalysis(ia2)
m1 <- metaprop(4:1, 10 * 1:4, method = "Inverse")
ia2 <- InfluenceAnalysis(m1)
plot(ia2, "ES")
plot(ia2, "I2")
?metarate
m.ir <- metarate(4:1, c(10, 20, 30, 40), sm = "IR")
m.ir <- metarate(4:1, c(10, 20, 30, 40), sm = "IR")
ia3 <- InfluenceAnalysis(m.ir)
plot(ia3, "ES")
m.ir
m.ir <- metarate(4:1, c(10, 20, 30, 40), sm = "IRLN")
ia3 <- InfluenceAnalysis(m.ir)
plot(ia3, "ES")
?metacont
data(Fleiss93cont)
mc <- metacont(n.e, mean.e, sd.e, n.c, mean.c, sd.c,
data = Fleiss93cont, sm = "SMD")
plot(ia3, "I2")
library(dmetar)
data("Olkin95")
mbin <- metabin(event.e, n.e, event.c, n.c,
data = Olkin95, subset = year < 1970,
sm = "OR", method = "Inverse", studlab = author)
ia1 <- InfluenceAnalysis(mbin)
plot(ia1, "ES")
plot(ia1, "I2")
library(dmetar)
data("Olkin95")
mbin <- metabin(event.e, n.e, event.c, n.c,
data = Olkin95, subset = year < 1970,
sm = "OR", method = "Inverse", studlab = author)
ia1 <- InfluenceAnalysis(mbin)
plot(ia1, "ES")
library(dmetar)
data("Olkin95")
mbin <- metabin(event.e, n.e, event.c, n.c,
data = Olkin95, subset = year < 1970,
sm = "OR", method = "Inverse", studlab = author)
ia1 <- InfluenceAnalysis(mbin)
plot(ia1, "ES")
data("Olkin95")
data("DepressionMortality")
mbin <- metabin(event.e, n.e, event.c, n.c,
data = DepressionMortality,
sm = "OR", method = "Inverse", studlab = author)
ia1 <- InfluenceAnalysis(mbin)
plot(ia1, "ES")
mbin
DepressionMortality$author
data("Olkin95")
data("DepressionMortality")
DepressionMortality$author[16] <- "Thomas et al., 1992 (I)"
mbin <- metabin(event.e, n.e, event.c, n.c,
data = DepressionMortality,
sm = "OR", method = "Inverse", studlab = author)
ia1 <- InfluenceAnalysis(mbin)
plot(ia1, "ES")
ia1
plot(ia1, "I2")
library(dmetar)
data("Olkin95")
data("DepressionMortality")
DepressionMortality$author[16] <- "Thomas et al., 1992 (I)"
mbin <- metabin(event.e, n.e, event.c, n.c,
data = DepressionMortality,
sm = "OR", method = "Inverse", studlab = author)
ia1 <- InfluenceAnalysis(mbin)
plot(ia1, "ES")
plot(ia1, "ES")
plot(ia1, "I2")
data("DepressionMortality")
x <- mbin
duplicated(x$studlab)
x$studlab
data("DepressionMortality")
mbin <- metabin(event.e, n.e, event.c, n.c,
data = DepressionMortality,
sm = "OR", method = "Inverse", studlab = author)
x <- mbin
duplicated(x$studlab)
?duplicated
duplicated(x$studlab)
x$studlab
x$studlab[duplicated(x$studlab)]
make.unique(x$studlab)
make.unique(x$studlab)
library(dmetar)
pkgdown::build_site()
devtools::check_win_devel()
library(dmetar)
devtools::check_win_devel()
?check_built
devtools::build_manual
devtools::build_manual()
devtools::build_manual()
pkgdown::build_site()
library(metafor)
dat <- dat.konstantopoulos2011
res <- rma.mv(yi, vi, random = ~ 1 | district/school, data=dat)
res
res$random
res$random[[1]]
grepl(res$random[[1]], "/")
grep(res$random[[1]], "/")
grep("/", res$random[[1]])
grepl("/", res$random[[1]])
?grepl
grepl("/", as.character(res$random[[1]]))
as.character(res$random[[1]])
as.character(res$random[[1]][2])
as.character(paste0(res$random[[1]]))
paste0(res$random[[1]])
paste0(as.character(res$random[[1]]))
past0(c("s", "a"))
paste0(c("s", "a"))
paste0("s", "a")
as.character(res$random[[1]])
as.character(res$random[[1]])[2]
as.character(res$random[[1]])[1]
paste0(as.character(res$random[[1]]))
grep("/", as.character(res$random[[1]]))
grepl("/", as.character(res$random[[1]]))
sum(grepl("/", as.character(res$random[[1]])))
library(dmetar)
dat <- dat.konstantopoulos2011
res <- rma.mv(yi, vi, random = ~ 1 | district/school, data=dat)
res
mlm.variance.distribution(res)
library(dmetar)
mlm.variance.distribution(res)
?rma.mv
dat <- dat.konstantopoulos2011
res <- rma.mv(yi, vi, random = list(~ 1 | district, ~ 1 | school), data=dat)
res
mlm.variance.distribution(res)
mlm.variance.distribution(res)
dat <- dat.konstantopoulos2011
res <- rma.mv(yi, vi, random = ~ 1 | district/school, data=dat)
res
mlm.variance.distribution(res)
library(dmetar)
?mlm.variance.distribution
res
?rma.mv
res.ml <- rma.mv(yi, vi, random = ~ 1 | district/school, data=dat)
library(metafor)
res.ml <- rma.mv(yi, vi, random = ~ 1 | district/school, data=dat)
dat = dat.konstantopoulos2011
res.ml <- rma.mv(yi, vi, random = ~ 1 | district/school, data=dat)
x = res.ml
# Get variance diagonal and calculate total variance
n = m$k.eff
vector.inv.var = 1/(diag(m$V))
sum.inv.var = sum(vector.inv.var)
sum.sq.inv.var = (sum.inv.var)^2
vector.inv.var.sq = 1/(diag(m$V)^2)
sum.inv.var.sq = sum(vector.inv.var.sq)
num = (n-1)*sum.inv.var
den = sum.sq.inv.var - sum.inv.var.sq
est.samp.var = num/den
# Calculate variance proportions
level1=((est.samp.var)/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level2=((m$sigma2[2])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level3=((m$sigma2[1])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
# Prepare df for return
Level=c("Level 1", "Level 2", "Level 3")
Variance=c(level1, level2, level3)
df.res=data.frame(Variance)
colnames(df.res) = c("% of total variance")
rownames(df.res) = Level
I2 = c("---", round(Variance[2:3], 2))
df.res = as.data.frame(cbind(df.res, I2))
totalI2 = Variance[2] + Variance[3]
# Generate plot
df1 = data.frame("Level" = c("Sampling Error", "Total Heterogeneity"),
"Variance" = c(df.res[1,1], df.res[2,1]+df.res[3,1]),
"Type" = rep(1,2))
df2 = data.frame("Level" = rownames(df.res),
"Variance" = df.res[,1],
"Type" = rep(2,3))
df = as.data.frame(rbind(df1, df2))
g = ggplot(df, aes(fill=Level, y=Variance, x=as.factor(Type))) +
coord_cartesian(ylim = c(0,1), clip = "off") +
geom_bar(stat="identity", position="fill", width = 1, color="black") +
scale_y_continuous(labels = scales::percent)+
theme(axis.title.x=element_blank(),
axis.text.y = element_text(color="black"),
axis.line.y = element_blank(),
axis.title.y=element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_line(lineend = "round"),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.background = element_rect(linetype="solid",
colour ="black"),
legend.title = element_blank(),
legend.key.size = unit(0.75,"cm"),
axis.ticks.length=unit(.25, "cm"),
plot.margin = unit(c(1,3,1,1), "lines")) +
scale_fill_manual(values = c("darkseagreen3", "deepskyblue3", "darkseagreen2",
"deepskyblue1", "deepskyblue2")) +
# Add Annotation
# Total Variance
annotate("text", x = 1.5, y = 1.05,
label = paste("Total Variance:",
round(m$sigma2[1]+m$sigma2[2]+est.samp.var, 3))) +
# Sampling Error
annotate("text", x = 1, y = (df[1,2]/2+df[2,2])/100,
label = paste("Sampling Error Variance: \n", round(est.samp.var, 3)), size = 3) +
# Total I2
annotate("text", x = 1, y = ((df[2,2])/100)/2-0.02,
label = bquote("Total"~italic(I)^2*":"~.(round(df[2,2],2))*"%"), size = 3) +
annotate("text", x = 1, y = ((df[2,2])/100)/2+0.05,
label = paste("Variance not attributable \n to sampling error: \n", round(m$sigma2[1]+m$sigma2[2],3)), size = 3) +
# Level 1
annotate("text", x = 2, y = (df[1,2]/2+df[2,2])/100, label = paste("Level 1: \n",
round(df$Variance[3],2), "%", sep=""), size = 3) +
# Level 2
annotate("text", x = 2, y = (df[5,2]+(df[4,2]/2))/100,
label = bquote(italic(I)[Level2]^2*":"~.(round(df[4,2],2))*"%"), size = 3) +
# Level 3
annotate("text", x = 2, y = (df[5,2]/2)/100,
label = bquote(italic(I)[Level3]^2*":"~.(round(df[5,2],2))*"%"), size = 3)
library(ggplot2)
# Get variance diagonal and calculate total variance
n = m$k.eff
vector.inv.var = 1/(diag(m$V))
sum.inv.var = sum(vector.inv.var)
sum.sq.inv.var = (sum.inv.var)^2
vector.inv.var.sq = 1/(diag(m$V)^2)
sum.inv.var.sq = sum(vector.inv.var.sq)
num = (n-1)*sum.inv.var
den = sum.sq.inv.var - sum.inv.var.sq
est.samp.var = num/den
# Calculate variance proportions
level1=((est.samp.var)/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level2=((m$sigma2[2])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level3=((m$sigma2[1])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
# Prepare df for return
Level=c("Level 1", "Level 2", "Level 3")
Variance=c(level1, level2, level3)
df.res=data.frame(Variance)
colnames(df.res) = c("% of total variance")
rownames(df.res) = Level
I2 = c("---", round(Variance[2:3], 2))
df.res = as.data.frame(cbind(df.res, I2))
totalI2 = Variance[2] + Variance[3]
# Generate plot
df1 = data.frame("Level" = c("Sampling Error", "Total Heterogeneity"),
"Variance" = c(df.res[1,1], df.res[2,1]+df.res[3,1]),
"Type" = rep(1,2))
df2 = data.frame("Level" = rownames(df.res),
"Variance" = df.res[,1],
"Type" = rep(2,3))
df = as.data.frame(rbind(df1, df2))
g = ggplot(df, aes(fill=Level, y=Variance, x=as.factor(Type))) +
coord_cartesian(ylim = c(0,1), clip = "off") +
geom_bar(stat="identity", position="fill", width = 1, color="black") +
scale_y_continuous(labels = scales::percent)+
theme(axis.title.x=element_blank(),
axis.text.y = element_text(color="black"),
axis.line.y = element_blank(),
axis.title.y=element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_line(lineend = "round"),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.background = element_rect(linetype="solid",
colour ="black"),
legend.title = element_blank(),
legend.key.size = unit(0.75,"cm"),
axis.ticks.length=unit(.25, "cm"),
plot.margin = unit(c(1,3,1,1), "lines")) +
scale_fill_manual(values = c("darkseagreen3", "deepskyblue3", "darkseagreen2",
"deepskyblue1", "deepskyblue2")) +
# Add Annotation
# Total Variance
annotate("text", x = 1.5, y = 1.05,
label = paste("Total Variance:",
round(m$sigma2[1]+m$sigma2[2]+est.samp.var, 3))) +
# Sampling Error
annotate("text", x = 1, y = (df[1,2]/2+df[2,2])/100,
label = paste("Sampling Error Variance: \n", round(est.samp.var, 3)), size = 3) +
# Total I2
annotate("text", x = 1, y = ((df[2,2])/100)/2-0.02,
label = bquote("Total"~italic(I)^2*":"~.(round(df[2,2],2))*"%"), size = 3) +
annotate("text", x = 1, y = ((df[2,2])/100)/2+0.05,
label = paste("Variance not attributable \n to sampling error: \n", round(m$sigma2[1]+m$sigma2[2],3)), size = 3) +
# Level 1
annotate("text", x = 2, y = (df[1,2]/2+df[2,2])/100, label = paste("Level 1: \n",
round(df$Variance[3],2), "%", sep=""), size = 3) +
# Level 2
annotate("text", x = 2, y = (df[5,2]+(df[4,2]/2))/100,
label = bquote(italic(I)[Level2]^2*":"~.(round(df[4,2],2))*"%"), size = 3) +
# Level 3
annotate("text", x = 2, y = (df[5,2]/2)/100,
label = bquote(italic(I)[Level3]^2*":"~.(round(df[5,2],2))*"%"), size = 3)
g
m = x
n = m$k.eff
vector.inv.var = 1/(diag(m$V))
sum.inv.var = sum(vector.inv.var)
sum.sq.inv.var = (sum.inv.var)^2
vector.inv.var.sq = 1/(diag(m$V)^2)
sum.inv.var.sq = sum(vector.inv.var.sq)
num = (n-1)*sum.inv.var
den = sum.sq.inv.var - sum.inv.var.sq
est.samp.var = num/den
# Calculate variance proportions
level1=((est.samp.var)/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level2=((m$sigma2[2])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level3=((m$sigma2[1])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
# Prepare df for return
Level=c("Level 1", "Level 2", "Level 3")
Variance=c(level1, level2, level3)
df.res=data.frame(Variance)
colnames(df.res) = c("% of total variance")
rownames(df.res) = Level
I2 = c("---", round(Variance[2:3], 2))
df.res = as.data.frame(cbind(df.res, I2))
totalI2 = Variance[2] + Variance[3]
# Generate plot
df1 = data.frame("Level" = c("Sampling Error", "Total Heterogeneity"),
"Variance" = c(df.res[1,1], df.res[2,1]+df.res[3,1]),
"Type" = rep(1,2))
df2 = data.frame("Level" = rownames(df.res),
"Variance" = df.res[,1],
"Type" = rep(2,3))
df = as.data.frame(rbind(df1, df2))
g = ggplot(df, aes(fill=Level, y=Variance, x=as.factor(Type))) +
coord_cartesian(ylim = c(0,1), clip = "off") +
geom_bar(stat="identity", position="fill", width = 1, color="black") +
scale_y_continuous(labels = scales::percent)+
theme(axis.title.x=element_blank(),
axis.text.y = element_text(color="black"),
axis.line.y = element_blank(),
axis.title.y=element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_line(lineend = "round"),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.background = element_rect(linetype="solid",
colour ="black"),
legend.title = element_blank(),
legend.key.size = unit(0.75,"cm"),
axis.ticks.length=unit(.25, "cm"),
plot.margin = unit(c(1,3,1,1), "lines")) +
scale_fill_manual(values = c("darkseagreen3", "deepskyblue3", "darkseagreen2",
"deepskyblue1", "deepskyblue2")) +
# Add Annotation
# Total Variance
annotate("text", x = 1.5, y = 1.05,
label = paste("Total Variance:",
round(m$sigma2[1]+m$sigma2[2]+est.samp.var, 3))) +
# Sampling Error
annotate("text", x = 1, y = (df[1,2]/2+df[2,2])/100,
label = paste("Sampling Error Variance: \n", round(est.samp.var, 3)), size = 3) +
# Total I2
annotate("text", x = 1, y = ((df[2,2])/100)/2-0.02,
label = bquote("Total"~italic(I)^2*":"~.(round(df[2,2],2))*"%"), size = 3) +
annotate("text", x = 1, y = ((df[2,2])/100)/2+0.05,
label = paste("Variance not attributable \n to sampling error: \n", round(m$sigma2[1]+m$sigma2[2],3)), size = 3) +
# Level 1
annotate("text", x = 2, y = (df[1,2]/2+df[2,2])/100, label = paste("Level 1: \n",
round(df$Variance[3],2), "%", sep=""), size = 3) +
# Level 2
annotate("text", x = 2, y = (df[5,2]+(df[4,2]/2))/100,
label = bquote(italic(I)[Level2]^2*":"~.(round(df[4,2],2))*"%"), size = 3) +
# Level 3
annotate("text", x = 2, y = (df[5,2]/2)/100,
label = bquote(italic(I)[Level3]^2*":"~.(round(df[5,2],2))*"%"), size = 3)
g
suppressWarnings(plot(g))
g$layers
g$mapping
g$labels
g$layers
g$layers
g$layers[[1]]
g$scales
g + scale_fill_manual(values = c("gray85", "gray90", "white", "gray85", "gray95"))
g + suppressMessages(scale_fill_manual(values = c("gray85", "gray90", "white", "gray85", "gray95")))
g + suppressWarnings(scale_fill_manual(values = c("gray85", "gray90", "white", "gray85", "gray95")))
suppressWarnings((g + scale_fill_manual(values = c("gray85", "gray90", "white", "gray85", "gray95")))
suppressWarnings(g + scale_fill_manual(values = c("gray85", "gray90", "white", "gray85", "gray95")))
suppressMessages(g + scale_fill_manual(values = c("gray85", "gray90", "white", "gray85", "gray95")))
suppressWarnings(suppressMessages(g + scale_fill_manual(values = c("gray85", "gray90", "white", "gray85", "gray95"))))
suppressWarnings(plot(x$plot))
devtools::document()
devtools::document()
library(dmetar)
?mlm.variance.distribution
m = rma.mv(yi, vi, random = ~ 1 | district/school, data=dat.konstantopoulos2011)
mlm.variance.distribution(m)
mlm.variance.distribution(m) -> res
res
class(res)
plot(res)
plot(res, greyscale = TRUE)
library(dmetar)
var.comp(m) -> res
mlm.variance.distribution(m)
dmetar::var.comp(m)
devtools::document()
?var.comp
devtools::document()
data("Chernobyl")
m2 = rma.mv(yi = z, V = var.z, data = Chernobyl, random = ~ 1 | author/es.id)
res = var.comp(m2)
res
plot(res)
library(dmetar)
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
power.analysis(d = 0.18, k = 18, n1 = 50, n2 = 50, heterogeneity = "moderate")
power.analysis(d = 0.18, k = 18, n1 = 50, n2 = 50, heterogeneity = "moderate")
?multimodel.inference
multimodel.inference()
multimodel.inference
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
?gosh.diagnostics
?InfluenceAnalysis
data("m.gosh")
res <- gosh.diagnostics(m.gosh, verbose = FALSE)
summary(res)
plot(res)
pkgdown::build_site()
devtools::document()
