sum.sq.inv.var = (sum.inv.var)^2
vector.inv.var.sq = 1/(diag(m$V)^2)
sum.inv.var.sq = sum(vector.inv.var.sq)
num = (n-1)*sum.inv.var
den = sum.sq.inv.var - sum.inv.var.sq
est.samp.var = num/den
# Calculate variance proportions
level1=((est.samp.var)/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level2=((m$sigma2[2])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level3=((m$sigma2[1])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
# Prepare df for return
Level=c("Level 1", "Level 2", "Level 3")
Variance=c(level1, level2, level3)
df.res=data.frame(Variance)
colnames(df.res) = c("% of total variance")
rownames(df.res) = Level
I2 = c("---", round(Variance[2:3], 2))
df.res = as.data.frame(cbind(df.res, I2))
totalI2 = Variance[2] + Variance[3]
# Generate plot
df1 = data.frame("Level" = c("Sampling Error", "Total Heterogeneity"),
"Variance" = c(df.res[1,1], df.res[2,1]+df.res[3,1]),
"Type" = rep(1,2))
df2 = data.frame("Level" = rownames(df.res),
"Variance" = df.res[,1],
"Type" = rep(2,3))
df = as.data.frame(rbind(df1, df2))
g = ggplot(df, aes(fill=Level, y=Variance, x=as.factor(Type))) +
coord_cartesian(ylim = c(0,1), clip = "off") +
geom_bar(stat="identity", position="fill", width = 1, color="black") +
scale_y_continuous(labels = scales::percent)+
theme(axis.title.x=element_blank(),
axis.text.y = element_text(color="black"),
axis.line.y = element_blank(),
axis.title.y=element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_line(lineend = "round"),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.background = element_rect(linetype="solid",
colour ="black"),
legend.title = element_blank(),
legend.key.size = unit(0.75,"cm"),
axis.ticks.length=unit(.25, "cm"),
plot.margin = unit(c(1,3,1,1), "lines")) +
scale_fill_manual(values = c("darkseagreen3", "deepskyblue3", "darkseagreen2",
"deepskyblue1", "deepskyblue2")) +
# Add Annotation
# Total Variance
annotate("text", x = 1.5, y = 1.05,
label = paste("Total Variance:",
round(m$sigma2[1]+m$sigma2[2]+est.samp.var, 3))) +
# Sampling Error
annotate("text", x = 1, y = (df[1,2]/2+df[2,2])/100,
label = paste("Sampling Error Variance: \n", round(est.samp.var, 3)), size = 3) +
# Total I2
annotate("text", x = 1, y = ((df[2,2])/100)/2-0.02,
label = bquote("Total"~italic(I)^2*":"~.(round(df[2,2],2))*"%"), size = 3) +
annotate("text", x = 1, y = ((df[2,2])/100)/2+0.05,
label = paste("Variance not attributable \n to sampling error: \n", round(m$sigma2[1]+m$sigma2[2],3)), size = 3) +
# Level 1
annotate("text", x = 2, y = (df[1,2]/2+df[2,2])/100, label = paste("Level 1: \n",
round(df$Variance[3],2), "%", sep=""), size = 3) +
# Level 2
annotate("text", x = 2, y = (df[5,2]+(df[4,2]/2))/100,
label = bquote(italic(I)[Level2]^2*":"~.(round(df[4,2],2))*"%"), size = 3) +
# Level 3
annotate("text", x = 2, y = (df[5,2]/2)/100,
label = bquote(italic(I)[Level3]^2*":"~.(round(df[5,2],2))*"%"), size = 3)
library(ggplot2)
# Get variance diagonal and calculate total variance
n = m$k.eff
vector.inv.var = 1/(diag(m$V))
sum.inv.var = sum(vector.inv.var)
sum.sq.inv.var = (sum.inv.var)^2
vector.inv.var.sq = 1/(diag(m$V)^2)
sum.inv.var.sq = sum(vector.inv.var.sq)
num = (n-1)*sum.inv.var
den = sum.sq.inv.var - sum.inv.var.sq
est.samp.var = num/den
# Calculate variance proportions
level1=((est.samp.var)/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level2=((m$sigma2[2])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level3=((m$sigma2[1])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
# Prepare df for return
Level=c("Level 1", "Level 2", "Level 3")
Variance=c(level1, level2, level3)
df.res=data.frame(Variance)
colnames(df.res) = c("% of total variance")
rownames(df.res) = Level
I2 = c("---", round(Variance[2:3], 2))
df.res = as.data.frame(cbind(df.res, I2))
totalI2 = Variance[2] + Variance[3]
# Generate plot
df1 = data.frame("Level" = c("Sampling Error", "Total Heterogeneity"),
"Variance" = c(df.res[1,1], df.res[2,1]+df.res[3,1]),
"Type" = rep(1,2))
df2 = data.frame("Level" = rownames(df.res),
"Variance" = df.res[,1],
"Type" = rep(2,3))
df = as.data.frame(rbind(df1, df2))
g = ggplot(df, aes(fill=Level, y=Variance, x=as.factor(Type))) +
coord_cartesian(ylim = c(0,1), clip = "off") +
geom_bar(stat="identity", position="fill", width = 1, color="black") +
scale_y_continuous(labels = scales::percent)+
theme(axis.title.x=element_blank(),
axis.text.y = element_text(color="black"),
axis.line.y = element_blank(),
axis.title.y=element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_line(lineend = "round"),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.background = element_rect(linetype="solid",
colour ="black"),
legend.title = element_blank(),
legend.key.size = unit(0.75,"cm"),
axis.ticks.length=unit(.25, "cm"),
plot.margin = unit(c(1,3,1,1), "lines")) +
scale_fill_manual(values = c("darkseagreen3", "deepskyblue3", "darkseagreen2",
"deepskyblue1", "deepskyblue2")) +
# Add Annotation
# Total Variance
annotate("text", x = 1.5, y = 1.05,
label = paste("Total Variance:",
round(m$sigma2[1]+m$sigma2[2]+est.samp.var, 3))) +
# Sampling Error
annotate("text", x = 1, y = (df[1,2]/2+df[2,2])/100,
label = paste("Sampling Error Variance: \n", round(est.samp.var, 3)), size = 3) +
# Total I2
annotate("text", x = 1, y = ((df[2,2])/100)/2-0.02,
label = bquote("Total"~italic(I)^2*":"~.(round(df[2,2],2))*"%"), size = 3) +
annotate("text", x = 1, y = ((df[2,2])/100)/2+0.05,
label = paste("Variance not attributable \n to sampling error: \n", round(m$sigma2[1]+m$sigma2[2],3)), size = 3) +
# Level 1
annotate("text", x = 2, y = (df[1,2]/2+df[2,2])/100, label = paste("Level 1: \n",
round(df$Variance[3],2), "%", sep=""), size = 3) +
# Level 2
annotate("text", x = 2, y = (df[5,2]+(df[4,2]/2))/100,
label = bquote(italic(I)[Level2]^2*":"~.(round(df[4,2],2))*"%"), size = 3) +
# Level 3
annotate("text", x = 2, y = (df[5,2]/2)/100,
label = bquote(italic(I)[Level3]^2*":"~.(round(df[5,2],2))*"%"), size = 3)
g
m = x
n = m$k.eff
vector.inv.var = 1/(diag(m$V))
sum.inv.var = sum(vector.inv.var)
sum.sq.inv.var = (sum.inv.var)^2
vector.inv.var.sq = 1/(diag(m$V)^2)
sum.inv.var.sq = sum(vector.inv.var.sq)
num = (n-1)*sum.inv.var
den = sum.sq.inv.var - sum.inv.var.sq
est.samp.var = num/den
# Calculate variance proportions
level1=((est.samp.var)/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level2=((m$sigma2[2])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level3=((m$sigma2[1])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
# Prepare df for return
Level=c("Level 1", "Level 2", "Level 3")
Variance=c(level1, level2, level3)
df.res=data.frame(Variance)
colnames(df.res) = c("% of total variance")
rownames(df.res) = Level
I2 = c("---", round(Variance[2:3], 2))
df.res = as.data.frame(cbind(df.res, I2))
totalI2 = Variance[2] + Variance[3]
# Generate plot
df1 = data.frame("Level" = c("Sampling Error", "Total Heterogeneity"),
"Variance" = c(df.res[1,1], df.res[2,1]+df.res[3,1]),
"Type" = rep(1,2))
df2 = data.frame("Level" = rownames(df.res),
"Variance" = df.res[,1],
"Type" = rep(2,3))
df = as.data.frame(rbind(df1, df2))
g = ggplot(df, aes(fill=Level, y=Variance, x=as.factor(Type))) +
coord_cartesian(ylim = c(0,1), clip = "off") +
geom_bar(stat="identity", position="fill", width = 1, color="black") +
scale_y_continuous(labels = scales::percent)+
theme(axis.title.x=element_blank(),
axis.text.y = element_text(color="black"),
axis.line.y = element_blank(),
axis.title.y=element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_line(lineend = "round"),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.background = element_rect(linetype="solid",
colour ="black"),
legend.title = element_blank(),
legend.key.size = unit(0.75,"cm"),
axis.ticks.length=unit(.25, "cm"),
plot.margin = unit(c(1,3,1,1), "lines")) +
scale_fill_manual(values = c("darkseagreen3", "deepskyblue3", "darkseagreen2",
"deepskyblue1", "deepskyblue2")) +
# Add Annotation
# Total Variance
annotate("text", x = 1.5, y = 1.05,
label = paste("Total Variance:",
round(m$sigma2[1]+m$sigma2[2]+est.samp.var, 3))) +
# Sampling Error
annotate("text", x = 1, y = (df[1,2]/2+df[2,2])/100,
label = paste("Sampling Error Variance: \n", round(est.samp.var, 3)), size = 3) +
# Total I2
annotate("text", x = 1, y = ((df[2,2])/100)/2-0.02,
label = bquote("Total"~italic(I)^2*":"~.(round(df[2,2],2))*"%"), size = 3) +
annotate("text", x = 1, y = ((df[2,2])/100)/2+0.05,
label = paste("Variance not attributable \n to sampling error: \n", round(m$sigma2[1]+m$sigma2[2],3)), size = 3) +
# Level 1
annotate("text", x = 2, y = (df[1,2]/2+df[2,2])/100, label = paste("Level 1: \n",
round(df$Variance[3],2), "%", sep=""), size = 3) +
# Level 2
annotate("text", x = 2, y = (df[5,2]+(df[4,2]/2))/100,
label = bquote(italic(I)[Level2]^2*":"~.(round(df[4,2],2))*"%"), size = 3) +
# Level 3
annotate("text", x = 2, y = (df[5,2]/2)/100,
label = bquote(italic(I)[Level3]^2*":"~.(round(df[5,2],2))*"%"), size = 3)
g
suppressWarnings(plot(g))
g$layers
g$mapping
g$labels
g$layers
g$layers
g$layers[[1]]
g$scales
g + scale_fill_manual(values = c("gray85", "gray90", "white", "gray85", "gray95"))
g + suppressMessages(scale_fill_manual(values = c("gray85", "gray90", "white", "gray85", "gray95")))
g + suppressWarnings(scale_fill_manual(values = c("gray85", "gray90", "white", "gray85", "gray95")))
suppressWarnings((g + scale_fill_manual(values = c("gray85", "gray90", "white", "gray85", "gray95")))
suppressWarnings(g + scale_fill_manual(values = c("gray85", "gray90", "white", "gray85", "gray95")))
suppressMessages(g + scale_fill_manual(values = c("gray85", "gray90", "white", "gray85", "gray95")))
suppressWarnings(suppressMessages(g + scale_fill_manual(values = c("gray85", "gray90", "white", "gray85", "gray95"))))
suppressWarnings(plot(x$plot))
devtools::document()
devtools::document()
library(dmetar)
?mlm.variance.distribution
m = rma.mv(yi, vi, random = ~ 1 | district/school, data=dat.konstantopoulos2011)
mlm.variance.distribution(m)
mlm.variance.distribution(m) -> res
res
class(res)
plot(res)
plot(res, greyscale = TRUE)
library(dmetar)
var.comp(m) -> res
mlm.variance.distribution(m)
dmetar::var.comp(m)
devtools::document()
?var.comp
devtools::document()
data("Chernobyl")
m2 = rma.mv(yi = z, V = var.z, data = Chernobyl, random = ~ 1 | author/es.id)
res = var.comp(m2)
res
plot(res)
library(dmetar)
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
power.analysis(d = 0.18, k = 18, n1 = 50, n2 = 50, heterogeneity = "moderate")
power.analysis(d = 0.18, k = 18, n1 = 50, n2 = 50, heterogeneity = "moderate")
?multimodel.inference
multimodel.inference()
multimodel.inference
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
?gosh.diagnostics
?InfluenceAnalysis
data("m.gosh")
res <- gosh.diagnostics(m.gosh, verbose = FALSE)
summary(res)
plot(res)
pkgdown::build_site()
devtools::document()
?Digman97
library(metaSEM)
?Digman97
load("~/Documents/R/dmetar/data/SleepProblems.rda")
SleepProblems
length(SleepProblems$data)
?tssem1
library(lavaan)
devtools::document()
?SleepProblems
library(dmetar)
pkgdown::build_site()
library(dmetar)
library(dmetar)
pool.groups(as.integer(10), 10, 10, 10, 10, 10)
library(dmetar)
pool.groups(0, 10, 10, 10, 10, 10)
pool.groups(-10, 10, 10, 10, 10, 10)
se.from.p(effect.size = -0.56, p = 0.05, N = 75,
effect.size.type= "difference", calculate.g = FALSE)
se.from.p(effect.size = c(-0.56, -0.56), p = 0.05, N = 75,
effect.size.type= "difference", calculate.g = FALSE)
se.from.p(effect.size = c(-0.56, 0.56), p = 0.05, N = 75,
effect.size.type= "difference", calculate.g = FALSE)
library(dmetar)
se.from.p(effect.size = c(-0.56, 0.56), p = 0.05, N = 75,
effect.size.type= "difference", calculate.g = FALSE)
0.2862047^2
sqrt(0.2862047)
as.integer(0.03)
library(dmetar)
se.from.p(effect.size = 0.71, p = 14, N = 75,
effect.size.type= "difference", calculate.g = TRUE)
se.from.p(effect.size = 0.71, p = -14, N = 75,
effect.size.type= "difference", calculate.g = TRUE)
se.from.p(effect.size = 0.71, p = 0.5, N = 75,
effect.size.type= "difference", calculate.g = TRUE)
se.from.p(effect.size = log10(1.4), p = 0.012, N = 75,
effect.size.type= "ratio")
se.from.p(effect.size = 0, p = 0.80, N = 75,
effect.size.type= "ratio")
library(dmetar)
se.from.p(effect.size = -0.1, p = 0.80, N = 75,
effect.size.type= "ratio")
se.from.p(effect.size = -0.1, p = 0.80, N = 75,
effect.size.type= "difference")
?message
d = c(-0.123, 0.234, 0.123, 1.234, 0.12)
CER = c(0.42, 0.35, 0.26, 0.21, 0.23)
NNT(d, CER)
d = c(-0.123, 0.234, 0.123, 1.234, 0.12)
CER = c(0.42, 0.35, 0.26, 0.21, 0.23)
NNT(d, CER) -> nnts
NNT = 1/((2 * pnorm(d/sqrt(2)) - 1))
class(NNT)
?NNT
NNT(0.3, 0.3, names = "Hello")
NNT(0.3, 0.3, names = "Hello") -> dfs
dfs
dfs$Name
class(NNT)
c("numeric", "NNT", "raw.unspecified") -> xy
xy[-1]
library(dmetar)
d = c(-0.123, 0.234, 0.123, 1.234, 0.12)
CER = c(0.42, 0.35, 0.26, 0.21, 0.23)
NNT(d, CER) -> nnts
nnts
as.numeric(nnts)
nnts+5
nnts[1]
nnts[4]
cbind(nnts, nnts)
x = nnts
x
sum(x < 0) > 0
NNT(0.3, 0.3, names = "Hello")
library(dmetar)
d = c(-0.123, 0.234, 0.123, 1.234, 0.12)
CER = c(0.42, 0.35, 0.26, 0.21, 0.23)
NNT(d, CER)
devtools::document()
rm(list = c("NNT"))
devtools::document()
devtools::document()
library(dmetar)
d = c(-0.123, 0.234, 0.123, 1.234, 0.12)
CER = c(0.42, 0.35, 0.26, 0.21, 0.23)
NNT(d, CER)
d = c(-0.123, 0.234, 0.123, 1.234, 0.12)
CER = c(0.42, 0.35, 0.26, 0.21, 0.23)
NNT(d, CER) -> f
f
class(f)
library(dmetar)
d = c(-0.123, 0.234, 0.123, 1.234, 0.12)
CER = c(0.42, 0.35, 0.26, 0.21, 0.23)
NNT(d, CER)
d = c(-0.123, 0.234, 0.123, 1.234, 0.12)
CER = c(0.42, 0.35, 0.26, 0.21, 0.23)
NNT(d, CER) -> nnts
nnts
d = c(-0.123, 0.234, 0.123, 1.234, 0.12)
CER = c(0.42, 0.35, 0.26, 0.21, 0.23)
NNT(d) -> nnts
nnts
nnts
letters
letters[1:5]
d = c(-0.123, 0.234, 0.123, 1.234, 0.12)
CER = c(0.42, 0.35, 0.26, 0.21, 0.23)
NNT(d, names = letters[1:5]) -> nnts
nnts
qnorm(0.975)
NNT(0.0002)
NNT(0.0002) -> d
d
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a")
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a", method = "furukawa")
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a", method = "Furukawa")
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a", method = "KraemerKupfer")
class(NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a", method = "KraemerKupfer"))
library(dmetar)
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a")
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a", method = "KraemerKupfer")
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a", method = "Furukawa")
class(NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a", method = "Furukawa"))
library(dmetar)
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a", method = "Furukawa")
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a", method = "Furukawa")
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, method = "Furukawa")
NNT(0.5, 0.3, names="a", method = "Furukawa")
NNT(0.5, 0.3, method = "Furukawa")
library(dmetar)
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a")
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a", method = "Furukawa")
class(NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a", method = "Furukawa"))
library(dmetar)
class(NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a", method = "Furukawa"))
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, names="a", method = "Furukawa")
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, method = "Furukawa")
class(NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, method = "Furukawa"))[3]
library(dmetar)
class(NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, method = "Furukawa"))
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, method = "Furukawa")
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, method = "Furukawa", names = "a")
class(NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, method = "Furukawa", names = "a"))
class(NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, method = "Furukawa", names = "a"))[2]
class(NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, method = "Furukawa", names = "a"))[3]
NNT(event.e= 7, n.e=101, event.c= 10, n.c= 103, method = "Furukawa", names = "a")
NNT(event.e= 7, n.e=101, event.c= 2, n.c= 103, method = "Furukawa", names = "a")
NNT(-0.5, 0.3, method = "Furukawa", names = "a")
NNT(-0.5, 0.3, method = "Furukawa")
class(NNT(-0.5, 0.3, method = "Furukawa"))
class(NNT(-0.5, 0.3, method = "Furukawa", names = "a"))
library(dmetar)
class(NNT(-0.5, 0.3, method = "Furukawa", names = "a"))
NNT(-0.5, 0.3, method = "Furukawa", names = "a")
class(NNT(-0.5, 0.3, method = "Furukawa", names = "a")$NNT)
library(dmetar)
class(NNT(-0.5, 0.3, method = "Furukawa", names = "a")$NNT)
NNT(-0.5, 0.3, method = "Furukawa", names = "a")
class(NNT)
NNT(-0.5, 0.3, method = "Furukawa", names = "a")
library(dmetar)
NNT(-0.5, 0.3, method = "Furukawa", names = "a")
NNT(-0.5, 0.3, method = "Furukawa", names = "a")$NNT
class(NNT(-0.5, 0.3, method = "Furukawa", names = "a"))
library(dmetar)
class(NNT(-0.5, 0.3, method = "Furukawa", names = "a"))
NNT(-0.5, 0.3, method = "Furukawa", names = "a")
library(dmetar)
NNT(-0.5, 0.3, method = "Furukawa", names = "a")
NNT(-0.5, 0.3, method = "Furukawa")
NNT(-0.5, 0.3, method = "KraemerKupfer")
NNT(-0.5, 0.3, method = "KraemerKupfer", names = "a")
NNT(-0.5, 0.3, method = "KraemerKupfer", names = "ABC")
NNT(event.e= 0, n.e=101, event.c= 0, n.c= 103)
NNT(event.e= 20, n.e=101, event.c= 25, n.c= 103)
NNT(event.e= 20, n.e=101, event.c= 25, n.c= 103, names = "a")
NNT(event.e= 20, n.e=101, event.c= 25, n.c= 103, names = "ABC", method = "Furukawa")
NNT(event.e= 20, n.e=101, event.c= 25, n.c= 103, names = "ABC", method = "Furukawa") -> m
m
m$NNT
NNT(-3, names= "a")
NNT(-3, names= "a") -> m
m
NNT(d, CER=0.38, names=c("a", "b", "c", "d", "e"))
d = c(-0.127, 0.23, 1.23, 1.234, 3.12)
NNT(d)
NNT(d, CER=0.38, names=c("a", "b", "c", "d", "e"))
CER= c(0.3,0.4,0.5,0.6,0.7)
NNT(d, CER, names=c("a", "b", "c", "d", "e"))
0.3L
0.3L
NNT(d, CER, names=c("a", "b", "c", "d", "e"))
NNT(d= 2.2, CER= 0)
NNT(d= 2.2, method = "Furukawa")
NNT(d= 2.2, CER = "h", method = "Furukawa")
is.numeric(0.2)
is.numeric(as.double(0.2))
is.numeric(as.integer(0.2))
library(dmetar)
library(dmetar)
NNT(d= 2.2, CER = "h", method = "Furukawa")
NNT(d= 2.2, CER = 0.3, method = "Furukawa")
NNT(d= -2.2, CER = "h", method = "Furukawa")
NNT(d= -2.2, CER = 0.3, method = "Furukawa")
NNT(d= -2.2, CER = 0.3, method = "Furukawa", names = "Hallo")
NNT(d= -2.2, CER = 30, method = "Furukawa", names = "Hallo")
NNT(d= -2.2, CER = 30, method = "Furukawa", names = "Hallo")
library(dmetar)
library(dmetar)
NNT(d= -2.2, CER = 30, method = "Furukawa", names = "Hallo")
NNT(d= -2.2, CER = 0.3, method = "Furukawa", names = "Hallo")
NNT(d= -2.2, CER = -0.3, method = "Furukawa", names = "Hallo")
?print.NNT
NNT(d= 3.1, CER= 0.6, method= "KraemerKupfer")
NNT(d= 3.1, CER= 0.6, method= "KraemerKupfer") -> m
m
as.numeric(m)
TherapyFormatsGeMTC$data
